To list all of the templates available for dotnet, use this command:  dotnet -l

Create a solution file.  The name of the solution is the folder name where you are currently in.
dotnet new sln 

Extensions:
* C# by Microsoft
* C# Extensions by JosKreativ
* Auto Rename Tag by Jun Han
* Material Icon Theme by Philipp Kief
* NuGet Gallery by pcislo
* SQLite by alexcvzz

To hide unneeded folders:
Click File > Preferences > Settings

* Dotnet ef command line tool is needed and should be the same version of the entity framework installed
dotnet tool install --global dotnet-ef --version 6.0.7

How to install react
npx create-react-app client --template typescript --use-npm

How to add class to an html
className instead of class is to be used as 'class' is a reserved word for javascript

How to add in-line style
<h1 style={{color: 'red'}}>Re-Store</h1>

If this error is encountered
ERROR in [eslint] Plugin "react" was conflicted between "package.json Â» eslint-config-react-app

!!!Passing an empty array as dependency in useEffect will make this run only once and that is very important
useEffect(() => {
    fetch('http://localhost:5000/api/products')
    .then(response => response.json())
    .then(data => setProducts(data))
  }, [])

  Is there a recommended way to structure React projects?
  > None.  React is a very unopinionated library hence there's no opinion on how you put files into folders.
  That said there are few common approaches popular in the ecosystem you may want to consider.
  https://reactjs.org/docs/faq-structure.html

  !!!You can use <Fragment></Fragment> or empty tag <> to use as a wrapper as React component
  always need 1 parent for its child elements.  A <div> can solve as a wrapper, but if you 
  want something not be rendered in DOM, use empty tag
-----------------
Destructuring
// {products, addProduct} --> this is called destructuring so you don't need to use props like this before
// export default function Catalog(props: Props) {... and do something like props.products.map
export default function Catalog({products, addProduct}: Props) {
-----------------
Styling framework
https://mui.com/material-ui/getting-started/installation/
this project uses material v5.x
To install material ui:  npm install @mui/material @emotion/react @emotion/styled

<CssBaseline /> - this is needed to reset the styles.  Sample that your app has padding by default, this will reset it.
You may put it on app.tsx

Material UI uses Roboto font, add this to your index.html
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />

Icons are needed to be installed as well
npm install @mui/icons-material

If you need to override something for the material component.  Visit the documentation and search for the component api.
Focus on the propertis (e.g. appbar has this sx object for overriding styles)

 sx has access to theme's variables. e.g. color:  'primary.main'